# Using org-mode to create presentation because that's a little more fun right now
# Using: https://github.com/yjwen/org-reveal/
# Need to load-library ox-reveal and then run C-c C-e R R
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/2.5.0/
#+STARTUP: indent

* Introduction
# Estimated Time: 2 minutes
# TODO: Talk about ourselves
** Ed Paget
** Prasanna Gautam
* Setup
# Estimated Time: 30 minutes. Goal Time: 15 minuts
# TODO: Get users setup with Vagrant USB images
# TODO: Ensure that the setup is correct. (Run Diagnosis script)
** Getting your Dev Environment Ready
* Mesos: Introduction
** Terms
- Tasks
- Scheduler
- Executor
  # TODO - Show examples of different kinds of executors with code
- Framework
- Driver
- libMesos
** Overview of How Mesos Framework works
# TODO: Describe request flow for a Scheduler
- Offer Model
- FrameworkMessage
* (go) hello-mesos
# Ask participants to run (go) on their systems
* (go-ha) Demo
# How does the distributed version work?
# TODO: Run multiple schedulers in the master
# TODO: Kill one of them and demonstrate the new leader

* Clojure: Introduction
** Syntax
- Introduction
- Comparison with Python and Javascript
** Why Use Clojure for writing Mesos Frameworks
- Writing protocol buffers in other languages can be tedious
- Just maps and Lists - Easier to explain. Concepts are the same
** Clj-mesos
- One we have most experience with
- The concepts are same with mesomatic too
* Workshop Goals
** Single Scheduler & Executors
** HA Scheduler & executors
- Failover
* Part 1: Getting Started
** Getting Started with mesos-framework
- Run =lein new mesos-framework= to get the scaffolding in place
** Run the REPL
- Run =lein repl=
- If you want to connect using CIDER, you may want to run
** Responding to the Mesos callbacks
- resourceOffers
- frameworkMessage
# TODO: Explain "Best Effort". Bookkeeping tasks that may not be critically time sensitive.



* Part 2: Hello Mesos!
  Introduction to Hello Mesos: https://github.com/clj-mesos-workshop/hello-mesos
  Implement a scheduler that prints "Hello Mesos"
  Compile and run on the Mesos environment from Part 1

* Part 3: Hello-Mesos Executor!
  Implement an executor for Hello-Mesos
  Task: Implement Status Update messages
  Task: Framework Messages

* Part 4: Web Interface
  Add a web interface to Hello Mesos!
  Task: Toggle messages based on the web interface inputs

* Part 5: Rendler - putting it together
  Rendler is a web crawling framework on Mesos https://github.com/clj-mesos-workshop/RENDLER
  The attendees will be provided with a server with crawlable pages for Rendler
  Task: Fill in ideas from Parts 1-3 into Rendler scaffolding
  To think: How would you build a very big web crawler using Clojure, Mesos and lots of servers?
